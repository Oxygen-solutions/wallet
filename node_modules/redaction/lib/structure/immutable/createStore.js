'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _redux = require('redux');

var _reduxImmutablejs = require('redux-immutablejs');

var _immutable = require('immutable');

var _wrapReducers = require('../../lib/wrapReducers');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var createStore = function createStore(props) {
  var _props$initialState = props.initialState,
      initialState = _props$initialState === undefined ? (0, _immutable.Map)() : _props$initialState,
      _props$reducers = props.reducers,
      reducers = _props$reducers === undefined ? {} : _props$reducers,
      _props$middleware = props.middleware,
      middleware = _props$middleware === undefined ? [] : _props$middleware,
      _props$enhancers = props.enhancers,
      enhancers = _props$enhancers === undefined ? [] : _props$enhancers;


  if (!_immutable.Iterable.isIterable(initialState)) {
    throw new Error('Invalid initialState option');
  }

  var store = (0, _redux.createStore)((0, _reduxImmutablejs.combineReducers)(reducers), initialState, _redux.compose.apply(undefined, [_redux.applyMiddleware.apply(undefined, _toConsumableArray(middleware))].concat(_toConsumableArray(enhancers))));

  (0, _wrapReducers.resolveDispatch)(store.dispatch);

  return store;
};

exports.default = createStore;