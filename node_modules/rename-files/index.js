'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

exports['default'] = rename;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _finf3 = require('finf');

var _finf4 = _interopRequireDefault(_finf3);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _gluePath = require('glue-path');

var _gluePath2 = _interopRequireDefault(_gluePath);

var _semafor = require('semafor');

var _semafor2 = _interopRequireDefault(_semafor);

function rename(_ref) {
  var dir = _ref.dir;
  var pattern = _ref.pattern;
  var replace = _ref.replace;
  var _ref$verbose = _ref.verbose;
  var verbose = _ref$verbose === undefined ? false : _ref$verbose;

  var logger = (0, _semafor2['default'])();
  if (dir == undefined) {
    if (verbose) logger.fail("Undefined dir param");
    return [new Error("Undefined dir param")];
  }
  dir = (0, _gluePath2['default'])([process.cwd(), dir]);

  if (pattern == undefined) {
    if (verbose) logger.fail("Undefined pattern param");
    return [new Error("Undefined pattern param")];
  }
  if (replace == undefined) {
    if (verbose) logger.warn("Undefined replace param, using '' as default");
    replace = "";
  }

  var _finf = (0, _finf4['default'])(dir, pattern);

  var _finf2 = _slicedToArray(_finf, 2);

  var err = _finf2[0];
  var list = _finf2[1];

  if (err) {
    if (verbose) logger.fail("Error finding files," + err.toString());
    return [err];
  }

  var len = list.length;
  var final_list = [];
  for (var i = 0; i < len; i++) {
    var f = list[i];

    pattern = pattern.replace('*', '');
    var regex = new RegExp(pattern);
    var _name = f.replace(regex, replace);

    var source_path = (0, _gluePath2['default'])([dir, f]);
    var dest_path = (0, _gluePath2['default'])([dir, _name]);

    var err1 = _fs2['default'].renameSync(source_path, dest_path);
    final_list.push({
      source: source_path,
      dest: dest_path,
      err: err1
    });
    if (err1 && verbose) logger.fail("Error renaming file, " + source_path + " -> " + dest_path);
  }
  var result = {
    dir: dir,
    pattern: pattern,
    replace: replace,
    list: final_list
  };
  return [null, result];
}

module.exports = exports['default'];
